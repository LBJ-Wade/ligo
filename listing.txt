coding: utf-8
# SIGNAL PROCESSING WITH GW150914 OPEN DATA
Welcome! This ipython notebook (or associated python script GW150914_tutorial.py ) will go through some typical signal processing tasks on strain time-series data associated with the LIGO GW150914 data release from the LIGO Open Science Center (LOSC):
* https://losc.ligo.org/events/GW150914/
* View the tutorial as a web page - https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.html/
* Download the tutorial as a python script - https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.py/
* Download the tutorial as iPython Notebook - https://losc.ligo.org/s/events/GW150914/GW150914_tutorial.ipynb/
To begin, download the ipython notebook, readligo.py, and the data files listed below, into a directory / folder, then run it. Or you can run the python script GW150914_tutorial.py. You will need the python packages: numpy, scipy, matplotlib, h5py.
On Windows, or if you prefer, you can use a python development environment such as Anaconda (https://www.continuum.io/why-anaconda) or Enthought Canopy (https://www.enthought.com/products/canopy/).
Questions, comments, suggestions, corrections, etc: email losc@ligo.caltech.edu
v20160208b
## Intro to signal processing
This tutorial assumes that you know python well enough.
If you know how to use "ipython notebook", use the GW150914_tutorial.ipynb file. Else, you can use the GW150914_tutorial.py script.
This tutorial assumes that you know a bit about signal processing of digital time series data (or want to learn!). This includes power spectral densities, spectrograms, digital filtering, whitening, audio manipulation. This is a vast and complex set of topics, but we will cover many of the basics in this tutorial.
If you are a beginner, here are some resources from the web:
* http://101science.com/dsp.htm
* https://georgemdallas.wordpress.com/2014/05/14/wavelets-4-dummies-signal-processing-fourier-transforms-and-heisenberg/
* https://en.wikipedia.org/wiki/Signal_processing
* https://en.wikipedia.org/wiki/Spectral_density
* https://en.wikipedia.org/wiki/Spectrogram
* http://greenteapress.com/thinkdsp/
* https://en.wikipedia.org/wiki/Digital_filter
And, well, lots more - google it!
## Download the data
* Download the data files from LOSC:
* We will use the hdf5 files, both H1 and L1, with durations of 32 and 4096 seconds around GW150914, sampled at 16384 and 4096 Hz :
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_4_V1-1126259446-32.hdf5
* https://losc.ligo.org/s/events/GW150914/L-L1_LOSC_4_V1-1126259446-32.hdf5
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_16_V1-1126259446-32.hdf5
* https://losc.ligo.org/s/events/GW150914/L-L1_LOSC_16_V1-1126259446-32.hdf5
* https://losc.ligo.org/s/events/GW150914/GW150914_4_NR_waveform.txt
* Download the python functions to read the data: https://losc.ligo.org/s/sample_code/readligo.py
* From a unix/mac-osx command line, you can use wget; for example,
* wget https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_4_V1-1126257414-4096.hdf5
* Put these files in your current directory / folder. Don't mix any other LOSC data files in this directory, or readligo.py may get confused.
Here,
* "H-H1" means that the data come from the LIGO Hanford Observatory site and the LIGO "H1" datector;
* the "_4_" means the strain time-series data are (down-)sampled from 16384 Hz to 4096 Hz;
* the "V1" means version 1 of this data release;
* "1126257414-4096" means the data starts at GPS time 1126257414 (Mon Sep 14 09:16:37 GMT 2015), duration 4096 seconds;
* NOTE: GPS time is number of seconds since Jan 6, 1980 GMT. See http://www.oc.nps.edu/oc2902w/gps/timsys.html or https://losc.ligo.org/gps/
* the filetype "hdf5" means the data are in hdf5 format:
https://www.hdfgroup.org/HDF5/
Note that the the 4096 second long files at 16384 Hz sampling rate are fairly big files (125 MB).
You won't need them for this tutorial:
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_4_V1-1126257414-4096.hdf5
* https://losc.ligo.org/s/events/GW150914/L-L1_LOSC_4_V1-1126257414-4096.hdf5
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_16_V1-1126257414-4096.hdf5
* https://losc.ligo.org/s/events/GW150914/L-L1_LOSC_16_V1-1126257414-4096.hdf5
In[2]:
Standard python numerical analysis imports:
the ipython magic below must be commented out in the .py file, since it doesn't work.
get_ipython().magic(u'matplotlib inline')
get_ipython().magic(u"config InlineBackend.figure_format = 'retina'")
LIGO-specific readligo.py
**NOTE** that in general, LIGO strain time series data has gaps (filled with NaNs) when the detectors are not taking valid ("science quality") data. Analyzing these data requires the user to loop over "segments" of valid data stretches. In https://losc.ligo.org/segments/ we provide example code to do this.
**However**, the 4096 seconds of released data around GW150914 is one unbroken segment, with no gaps. So for now, we will read it all in and treat it as one valid data segment, ignoring the extra complexity mentioned above.
**This won't work** for other LOSC data releases! See https://losc.ligo.org/segments/ for a more general way to find valid data segments in LOSC data.
In[3]:
@BEGIN GRAVITATIONAL_WAVE_DETECTION @desc Signal processing in gravitational wave detection.
@in fn_d  @as FN_Detector @desc LIGO GW150914 data at sampling rate 4096 Hz @uri file:{Detector}_LOSC_4_V1-1126259446-32.hdf5
@in fn_sr @as FN_Sampling_rate @desc LIGO GW150914 data from H1 detector with different sampling rate @uri file:H-H1_LOSC_{DownSampling}_V1-1126259446-32.hdf5
@param fs @desc sampling rate
@out shifted.wav @as shifted_wavefile @desc shifted wavefile @uri file:GW150914_{detector}_shifted.wav
@out whitenbp.wav @as whitened_bandpass_wavefile @desc whitened bandpass wavefile @uri file:GW150914_{detector}_whitenbp.wav
@out spectrogram_whitened.png @as spectrogram_whitened @desc whitened spectrogram @uri file:GW150914_{detector}_spectrogram_whitened.png
@out spectrogram.png @as spectrogram @desc spectrogram @uri file:GW150914_{detector}_spectrogram.png
@out GW150914_filter.png @as filtered_white_noise_data @desc filtered white noise data @uri file:GW150914_filter.png
@out GW150914_strain_whitened.png @as WHITENED_strain_data @desc WHITENED strain data @uri file:GW150914_strain_whitened.png
@out GW150914_H1_strain_filtered.png @as H1_strain_filtered @desc FILTERED strain data  @uri file:GW150914_H1_strain_filtered.png
@out GW150914_H1_strain_unfiltered.png @as H1_strain_unfiltered @desc UNFILTERED strain data @uri file:GW150914_H1_strain_unfiltered.png
@out GW150914_ASDs.png @as ASDs @desc strain data near GW150914 @uri file:GW150914_ASDs.png
@out GW150914_H1_ASD_SamplingRate.png @as H1_ASD_SamplingRate @uri file:GW150914_H1_ASD_{SamplingRate}.png
@BEGIN LOAD_DATA @desc Load hdf5 data.
@in fn_d  @as FN_Detector @uri file:{Detector}_LOSC_4_V1-1126259446-32.hdf5
@in fn_sr @as FN_Sampling_rate @uri file:H-H1_LOSC_{downsampling}_V1-1126259446-32.hdf5
@out strain_H1 @as strain_H1
@out strain_L1 @as strain_L1
@out strain_16 @as strain_16
@out strain_4 @as strain_4
----------------------------------------------------------------
Load LIGO data from a single file
----------------------------------------------------------------
First from H1
and then from L1
sampling rate:
both H1 and L1 will have the same time vector, so:
the time sample interval (uniformly sampled!)
@END LOAD_DATA
## Adding a numerical relativity template
Now let's also read in a theoretical (numerical relativity) template,
generated with parameters favored by the output from the GW150914 parameter estimation (see the GW150914 detection paper, https://dcc.ligo.org/P150914/public ).
This NR template corresponds to the signal expected from a pair of black holes with masses of around 36 and 29 solar masses, merging into a single black hole of 62 solar masses, at a distance of around 410 Mpc.
You can fetch the template time series from the following URL, and put it in your working directory / folder:
* https://losc.ligo.org/s/events/GW150914/GW150914_4_NR_waveform.txt
In[4]:
read in the NR template
## First look at the data from H1 and L1
In[5]:
First, let's look at the data and print out some stuff:
this doesn't seem to work for scientific notation:
np.set_printoptions(precision=4)
What's in chan_dict? See https://losc.ligo.org/archive/dataset/GW150914/
In[6]:
plot +- 5 seconds around the event:
Mon Sep 14 09:50:45 GMT 2015
seconds around the event
index into the strain time series for this time interval:
The data are dominated by **low frequency noise**; there is no way to see a signal here, without some signal processing.
There are very low frequency oscillations that are putting the mean of the L1 strain at -2.0e-18 at the time around this event, so it appears offset from the H1 strain. These low frequency oscillations are essentially ignored in LIGO data analysis (see bandpassing, below).
We will be "whitening" the data, below.
## Data in the Fourier domain - ASDs
Plotting these data in the Fourier domain gives us an idea of the frequency content of the data. A way to visualize the frequency content of the data is to plot the amplitude spectral density, ASD.
The ASDs are the square root of the power spectral densities (PSDs), which are averages of the square of the fast fourier transforms (FFTs) of the data.
They are an estimate of the "strain-equivalent noise" of the detectors versus frequency,
which limit the ability of the detectors to identify GW signals.
They are in units of strain/rt(Hz).
So, if you want to know the root-mean-square (rms) strain noise in a frequency band,
integrate (sum) the squares of the ASD over that band, then take the square-root.
There's a signal in these data!
For the moment, let's ignore that, and assume it's all noise.
In[7]:
@BEGIN AMPLITUDE_SPECTRAL_DENSITY  @desc Amplitude spectral density.
@in strain_H1 @as strain_H1
@in strain_L1 @as strain_L1
@param fs
@out psd_H1 @as PSD_H1
@out psd_L1 @as PSD_L1
@out GW150914_ASDs.png @as ASDs @desc strain data near GW150914 @uri file:GW150914_ASDs.png
number of sample for the fast fourier transform:
We will use interpolations of the ASDs computed above for whitening:
plot the ASDs:
NOTE that we only plot the data between fmin = 10 Hz and fmax = 2000 Hz.
Below fmin, the data **are not properly calibrated**. That's OK, because the noise is so high below fmin that LIGO cannot sense gravitational wave strain from astrophysical sources in that band.
The sample rate is fs = 4096 Hz (2^12 Hz), so the data cannot capture frequency content above the Nyquist frequency = fs/2 = 2048 Hz. That's OK, because GW150914 only has detectable frequency content in the range 20 Hz - 300 Hz.
You can see strong spectral lines in the data; they are all of instrumental origin. Some are engineered into the detectors (mirror suspension resonances at ~500 Hz and harmonics, calibration lines, control dither lines, etc) and some (60 Hz and harmonics) are unwanted. We'll return to these, later.
You can't see the signal in this plot, since it is relatively weak and less than a second long, while this plot averages over 32 seconds of data. So this plot is entirely dominated by instrumental noise.
Later on in this tutorial, we'll look at the data sampled at the full 16384 Hz (2^14 Hz).
## Whitening
From the ASD above, we can see that the data are very strongly "colored" - noise fluctuations are much larger at low and high frequencies and near spectral lines, reaching a roughly flat ("white") minimum in the band around 80 to 300 Hz.
We can "whiten" the data (dividing it by the noise amplitude spectrum, in the fourier domain), suppressing the extra noise at low frequencies and at the spectral lines, to better see the weak signals in the most sensitive band.
Whitening is always one of the first steps in astrophysical data analysis (searches, parameter estimation).
Whitening requires no prior knowledge of spectral lines, etc; only the data are needed.
The resulting time series is no longer in units of strain; now in units of "sigmas" away from the mean.
In[8]:
@END AMPLITUDE_SPECTRAL_DENSITY
@BEGIN WHITENING  @desc suppress low frequencies noise.
@in psd_H1 @as PSD_H1
@in psd_L1 @as PSD_L1
@out strain_H1_whiten @as strain_H1_whiten
@out strain_L1_whiten @as strain_L1_whiten
function to writen data
whitening: transform to freq domain, divide by asd, then transform back,
taking care to get normalization right.
now whiten the data from H1 and L1, and also the NR template:
Now plot the whitened strain data, along with the best-fit numerical relativity (NR) template.
To get rid of remaining high frequency noise, we will also bandpass the data (see bandpassing, below).
In[9]:
@END WHITENING
@BEGIN BANDPASSING   @desc remove high frequency noise.
@in strain_H1_whiten @as strain_H1_whiten
@in strain_L1_whiten @as strain_L1_whiten
@out strain_H1_whitenbp @as strain_H1_whitenbp
@out strain_L1_whitenbp @as strain_L1_whitenbp
We need to suppress the high frequencies with some bandpassing:
@END BANDPASSING
@BEGIN STRAIN_WAVEFORM_FOR_WHITENED_DATA @desc plot whitened data.
@in strain_H1_whitenbp  @as strain_H1_whitenbp
@in strain_L1_whitenbp @as strain_L1_whitenbp
@out GW150914_strain_whitened.png @as WHITENED_strain_data @desc WHITENED strain data @uri file:GW150914_strain_whitened.png
plot the data after whitening:
first, shift L1 by 7 ms, and invert. See the GW150914 detection paper for why!
@END STRAIN_WAVEFORM_FOR_WHITENED_DATA
The signal is now clearly visible in the whitened and bandpassed data. The "DC" offset between H1 and L1 data visible in the first plot is no longer visible here; the bandpassing cuts off frequency components below around 20 Hz and above 300 Hz.
The signal is visible as an oscillation sweeping from low to high frequency from -0.10 seconds to 0, then damping down into the random noise.
The signal looks roughly the same in both detectors. We had to shift the L1 data by 7 ms to get it to line up with the data from H1, because the source is roughly in the direction of the line connecting H1 to L1, and the wave travels at the speed of light, so it hits L1 7 ms earlier. Also, the orientation of L1 with respect to H1 means that we have to flip the sign of the signal in L1 for it to match the signal in H1.
It's exactly the kind of signal we expect from the inspiral, merger and ringdown of two massive black holes, as evidenced by the good match with the numerical relativity (NR) waveform, in black.
LIGO uses a rather elaborate software suite to match the data against a family of such signal waveforms ("templates"), to find the best match. This procedure helps LIGO to "optimally" separate signals from instrumental noise, and to infer the parameters of the source (masses, spins, sky location, orbit orientation, etc) from the best match templates.
@BEGIN SPECTROGRAMS_FOR_STRAIN_DATA   @desc plot spectrogram for strain data.
@in strain_H1  @as strain_H1
@in strain_L1  @as strain_L1
@param fs
@out spectrogram.png @as spectrogram @desc spectrogram @uri file:GW150914_{detector}_spectrogram.png
## Spectrograms
Now let's plot a short time-frequency spectrogram around GW150914:
In[10]:
Mon Sep 14 09:50:45 GMT 2015
seconds around the event
index into the strain time series for this time interval:
pick a shorter FTT time interval, like 1/8 of a second:
and with a lot of overlap, to resolve short-time features:
and choose a window that minimizes "spectral leakage"
(https://en.wikipedia.org/wiki/Spectral_leakage)
the right colormap is all-important! See:
http://matplotlib.org/examples/color/colormaps_reference.html
viridis seems to be the best for our purposes, but it's new; if you don't have it, you can settle for ocean.
Plot the H1 spectrogram:
Plot the L1 spectrogram:
@END SPECTROGRAMS_FOR_STRAIN_DATA
In the above spectrograms, you can see lots of excess power below ~20 Hz, as well as strong spectral lines at 500, 1000, 1500 Hz (also evident in the ASDs above). The lines at multiples of 500 Hz are the harmonics of the "violin modes" of the fibers holding up the mirrors of the LIGO interferometers.
The signal is just bately visible here, at time=0 and below 500 Hz. We need to zoom in around the event time, and to the frequency range from [20, 400] Hz, and use the whitened data generated above.
In[11]:
@BEGIN SPECTROGRAMS_FOR_WHITEND_DATA   @desc plot spectrogram for whitened data.
@in strain_H1_whiten @as strain_H1_whiten
@in strain_L1_whiten @as strain_L1_whiten
@param fs
@out spectrogram_whitened.png @as spectrogram_whitened @desc whitened spectrogram @uri file:GW150914_{detector}_spectrogram_whitened.png
plot the whitened data, zooming in on the signal region:
Mon Sep 14 09:50:45 GMT 2015
seconds around the event
index into the strain time series for this time interval:
pick a shorter FTT time interval, like 1/16 of a second:
and with a lot of overlap, to resolve short-time features:
and choose a window that minimizes "spectral leakage"
(https://en.wikipedia.org/wiki/Spectral_leakage)
Plot the H1 whitened spectrogram around the signal
Plot the L1 whitened spectrogram around the signal
@END SPECTROGRAMS_FOR_WHITEND_DATA
See the smudge between -0.2 and 0 seconds? That's our signal!
You can see it 'chirping' from lower to higher frequency over a small fraction of a second.
@BEGIN FILTER_COEFS   @desc Filter signal in time domain (bandpassing).
@param fs
@out coefs @as COEFFICIENTS
## Time-domain filtering - Bandpassing+notching
Now let's filter the signal in the time domain, using bandpassing to reveal the signal in the frequency band [40 , 300 Hz], and notching of spectral lines to remove those noise sources from the data.
In[12]:
generate linear time-domain filter coefficients, common to both H1 and L1.
First, define some functions:
This function will generate digital filter coefficients for bandstops (notches).
Understanding it requires some signal processing expertise, which we won't get into here.
ellip notch filter
fstops is a list of entries of the form [frequency (Hz), df, df2]
where df is the pass width and df2 is the stop width (narrower
than the pass width). Use caution if passing more than one freq at a time,
because the filter response might behave in ways you don't expect.
Zeros zd, poles pd, and gain kd for the digital filter
Notches
Set gain to one at 100 Hz...better not notch there
Return the numerator and denominator of the digital filter
assemble the filter b,a coefficients:
bandpass filter parameters
bandpass filter coefficients
Frequencies of notches at known instrumental spectral line frequencies.
You can see these lines in the ASD above, so it is straightforward to make this list.
notch filter coefficients:
Manually do a wider notch filter around 510 Hz etc.
also notch out the forest of lines around 331.5 Hz
@END FILTER_COEFS
@BEGIN FILTER_DATA    @desc filter data.
@in strain_H1  @as strain_H1
@in strain_L1  @as strain_L1
@in coefs @as  COEFFICIENTS
@out strain_H1_filt @as strain_H1_filt
@out strain_L1_filt @as strain_L1_filt
@out GW150914_filter.png @as filtered_white_noise_data @desc filter white noise data @uri file:GW150914_filter.png
and then define the filter function:
filtfilt applies a linear filter twice, once forward and once backwards.
The combined filter has linear phase.
To visualize the effect of this filter, let's generate "white" gaussian noise, and filter it.
In[13]:
get filter coefficients
generate random gaussian "data"
filter it:
compute the amplitude spectral density (ASD) of the original data, and the filtered data:
The asd is the square root; and let's normalize it to 1:
get the predicted filter frequency response using signal.freqz:
We "double pass" the filtering using filtfilt, so we square the filter response
plot the ASDs
From the above, you can see that the gaussian noise (blue) is "white" - it is flat in frequency (all the way up to Nyquist frequency of 2048 Hz, but we'lve cut it off at 600 Hz to see the effect of filtering). You can see in the filtered data (magenta) the effects of the bandpassing and the notches.
Now let's filter the data, and plot the results:
In[14]:
filter the data:
filter NR template as we do with the data:
@END FILTER_DATA
@BEGIN STRAIN_WAVEFORM_FOR_FILTERED_DATA    @desc plot the filtered data.
@in strain_H1_filt @as strain_H1_filt
@in strain_L1_filt @as strain_L1_filt
@out GW150914_H1_strain_filtered.png @as H1_strain_filtered @desc FILTERED strain data  @uri file:GW150914_H1_strain_filtered.png
@out GW150914_H1_strain_unfiltered.png @as H1_strain_unfiltered @desc UNFILTERED strain data @uri file:GW150914_H1_strain_unfiltered.png
strain_H1_filt_waveform as strain_H1_waveform
strain_L1_filt_waveform  as strain_L1_waveform
plot the data prior to filtering:
plot the data after filtering:
first, shift L1 by 7 ms, and invert. See the GW150914 detection paper for why!
We also have to shift the NR template by 2 ms to get it to line up properly with the data
@END STRAIN_WAVEFORM_FOR_FILTERED_DATA
The filtered data peak at around 1.e-21, 1000 times smaller than the scale in the first plot. The "DC" offset between H1 and L1 data visible in the first plot is no longer visible here; the bandpassing cuts off frequency components below around 40 Hz.
Now, as with whitening, the signal is visible as an oscillation sweeping from low to high frequency from -0.10 seconds to 0, then damping down into the random noise. Again, it looks roughly the same in both detectors, after shifting and flipping the L1 data with respect to H1. It's exactly the kind of signal we expect from the inspiral, merger and ringdown of two massive black holes.
And as with whitening, the NR waveform looks, by eye, to be a good match to the data in both detectors; the signal is consistent with the waveform predicted from General Relativity.
@BEGIN WAVE_FILE_GENERATOR_FOR_WHITENED_DATA  @desc Make sound files  for whitened data.
@in strain_H1_whitenbp @as strain_H1_whitenbp
@in strain_L1_whitenbp @as strain_L1_whitenbp
@out whitenbp.wav @as whitened_bandpass_wavefile @desc whitened bandpass wavefile @uri file:GW150914_{detector}_whitenbp.wav
## Make sound files
Make wav (sound) files from the filtered, downsampled data, +-2s around the event.
In[15]:
make wav (sound) files from the whitened data, +-2s around the event.
function to keep the data within integer limits, and write to wavfile:
Mon Sep 14 09:50:45 GMT 2015
seconds around the event
index into the strain time series for this time interval:
write the files:
@END WAVE_FILE_GENERATOR_FOR_WHITENED_DATA
With good headphones, you'll hear a faint thump in the middle.
We can enhance this by increasing the frequency;
this is the "audio" equivalent of the enhanced visuals that NASA employs on telescope images with "false color".
The code below will shift the data up by 400 Hz (by taking an FFT, shifting/rolling the frequency series, then inverse fft-ing). The resulting sound file will be noticibly more high-pitched, and the signal will be easier to hear.
In[16]:
shifts frequency of a band-passed signal
@BEGIN SHIFT_FREQUENCY_BANDPASSED @desc shift frequency of bandpassed signal.
@in strain_H1_whitenbp @as strain_H1_whitenbp
@in strain_L1_whitenbp @as strain_L1_whitenbp
@out strain_H1_shifted @as strain_H1_shifted
@out strain_L1_shifted @as strain_L1_shifted
function that shifts frequency of a band-passed signal
Frequency shift the signal by constant
print T,df,nbins,x.real.shape
parameters for frequency shift
shift frequency of the data
@END SHIFT_FREQUENCY_BANDPASSED
@BEGIN WAVE_FILE_GENERATOR_FOR_SHIFTED_DATA  @desc Make sound files for shifted data.
@in strain_H1_shifted @as strain_H1_shifted
@in strain_L1_shifted @as strain_L1_shifted
@out shifted.wav @as shifted_wavefile @desc shifted wavefile @uri file:GW150914_{detector}_shifted.wav
write the files:
@END WAVE_FILE_GENERATOR_FOR_SHIFTED_DATA
@BEGIN DOWNSAMPLING @desc Downsampling from 16384 Hz to 4096 Hz.
@in strain_16 @as strain_16
@in strain_4 @as strain_4
@out GW150914_H1_ASD_SamplingRate.png @as H1_ASD_SamplingRate @uri file:GW150914_H1_ASD_{SamplingRate}.png
## Downsampling from 16384 Hz to 4096 Hz
So far, we have been working with data sampled at fs=4096 Hz. This is entirely sufficient for signals with no frequency content above f_Nyquist = fs/2 = 2048 Hz, such as GW150914.
We downsample to 4096 Hz to save on download time, disk space, and memory requirements. If, however, you are interested in signals with frequency content above 2048 Hz, you need the data sampled at the full rate of 16384 Hz.
Here we demonstrate how to do that downsampling, and how it might limit you is you are interested in frequency content near 2048 Hz and above.
First, download a LOSC data file containing 32 seconds of data at the full 16384 Hz rate, and another downsampled at 4096 Hs, and put them in your working directory / folder:
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_16_V1-1126259446-32.hdf5
* https://losc.ligo.org/s/events/GW150914/H-H1_LOSC_4_V1-1126259446-32.hdf5
In[17]:
read in the data at 16384 Hz and at 4096 Hz:
Make PSDs of each:
Good agreement between 16384 Hz data and 4096 Hz data,
up to around f_Nyquist = 2048 Hz. Let's zoom in for a closer look:
In[18]:
Zoom in on the 1000-2000 Hz region:
The downsampled data deviate significantly from the original above ~1700 Hz. This is an undesirable, but inevitable result of downsampling (decimating). The plus side is that for frequencies less than 80% of Nyquist, the data are faithfully reproduced.
If frequency content above that point is important to you, you need to use the 16384 Hz data.
Else, you can save download time, disk space and memory by using the 4096 Hz data.
In[19]:
Now downsample the 16384 Hz data and compare with the 4096 Hz data
@END DOWNSAMPLING
The two traces are on top of each other, as expected. That's how we made the downsampled data in the first place.
From the above, we learn exactly how LOSC downsamples the strain time series from 16384 Hz to 4096 Hz
(ie, using scipy.decimate), and that if you are interested in frequency content above ~ 1700 Hz,
use the 16384 Hz sample rate data instead.
## Data segments
As mentioned above, LIGO strain time series data has gaps (filled with NaNs) when the detectors are not taking valid ("science quality") data. Analyzing these data requires the user to loop over "segments" of valid data stretches.
For this GW150914 data release, the data have no gaps. Let's verify this, using the L1 data file containing 32 seconds of data sampled at 4096 Hz.
You are welcome to repeat this with H1 data, with files containing 4096 seconds of data, and with data sampled at 16384 Hz. All of the relevant files are listed near the top of this tutorial.
In[20]:
read in the data at 4096 Hz:
select the level of data quality; default is "DATA" but "CBC_CAT3" is a conservative choice:
loop over seconds and print out start, stop and length:
here is where you would insert code to analyze the data in this segment.
now look at segments with no CBC hardware injections:
:param week: GPS week number, i.e. 1866
:param secs: number of seconds since the beginning of `week`
:return: datetime instance with UTC time
@END GRAVITATIONAL_WAVE_DETECTION
